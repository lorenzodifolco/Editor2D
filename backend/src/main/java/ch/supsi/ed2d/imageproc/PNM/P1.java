package ch.supsi.ed2d.imageproc.PNM;

import ch.supsi.ed2d.imageproc.InvalidImageException;
import ch.supsi.ed2d.imageproc.model.Image;
import ch.supsi.ed2d.imageproc.model.Pixel;
import ch.supsi.ed2d.imageproc.model.filters.BlackAndWhiteFilter;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Scanner;

public class P1 extends PNMInterpreter {

    private static P1 singleton;

    public static P1 getInstance()
    {
        if(singleton == null)
            singleton = new P1();
        return singleton;
    }

    private P1() {
        setType(PNMTypes.P1);
    }

    @Override
    public void save(Image img, String path) throws IOException, InvalidImageException {
        File f = new File(path);
        if(f.createNewFile())
        {
            try(var bw = new BufferedWriter(new FileWriter(f)))
            {
                StringBuilder sb = new StringBuilder();
                sb.append("P1\n")
                        .append("#Generated by supsi.ed2d\n")
                        .append(img.getWidth())
                        .append(" ")
                        .append(img.getHeight())
                        .append("\n");

                var bwImg = BlackAndWhiteFilter.getInstance().apply(img);
                for(Pixel p : bwImg)
                {
                    //we ignore the other channels given that the image has been converted to binary colors, and therefore we would have the same values in the other two. The fourth channel is ignored.
                    sb.append((int)p.getFirstChannel()).append("\n");
                }
                bw.write(sb.toString());
            }
        }
        else throw new IOException("File already exist");
    }

    protected Image loadBody(Scanner sc, PNMHeader header) throws InvalidImageException {
        Image img = new Image(header.getWidth(),header.getHeight());
        sc.useDelimiter("");
        img.apply((x,y)->{
            var c = sc.next();
            while(c.equals("\r") || c.equals("\n"))
                c = sc.next();

            int singleChannel = Integer.parseInt(c);

            switch(singleChannel)
            {
                case 0:
                    img.setPixel(Pixel.rgb(255,255,255),x,y);
                    break;
                case 1:
                    img.setPixel(Pixel.rgb(0,0,0),x,y);
                    break;
                default:
                    throw new InvalidImageException("Black and white image detected, scanned channels must have either 0 or 1 as a value");
            }
        });

        sc.close();
        return img;
    }
}